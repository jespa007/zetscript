

//----------------------------------------------------------
Version: 2.0.0
Date: XX-09-2020

 
#64 Implement "include" preprocessor feature 
#65 added shared/static link cmake option through -DLINK=[SHARED|STATIC]
#66 Added memory leak detection manager (only for GNU toolchain).  It needs memmanager https://github.org/jespa007/memmanager and pass -DMEMMANAGER parameter on cmake
#67 Compact all utils source in one called CZetScriptUtils
#68 implement try/catch. CZetScript getErrorMsg is not used anymore. catch will return message error and line
#69 Fix memory leaks on delete keyword
#70 concatenate string with return result from variable dot access it gives the function instead of result.
#71 Improve cmake print messages 
#72 post declare variable members it gives "already declared variable error"
#73 fixed return; fails 
#74 vectors are not deallocated if they are initialized on functions and declared as global (may be it has to deallocate on clearGlobalVariables ?)
#75 create vars within for/while scope gives memory leaks and there's no control about nomber of open/close claudators on main function 
#76 Fix print parent variable on access member error
#78 Allow N instances of zetscript instead of single one 
#80 initialize vars within class doesn't tell any error or warning 
#81 Fixed final parentesis/claudator lack detector 
#82 Allow "this" do assign or pass parameter as well as any object 

#85,#103 Implement for(..in..)  
#86 Implement access vector element by string 
#87 vector: Fixed error "push" strings into vector 
#88 struct: Fixed fail to find none of its elements 
#89 string as function parameter: Fixed doesn't parse \" within string

#90 for: Support for no pre/conditional and post expressions.
#91 Changed name vector::add by vector::push  
#92 Support for StringVar to const char conversion as parameter into C function 

 
#94 for/while/switch: break support 
#95 for: obligate to put "var" on pre for expression 
#96 for: continue keyword support
#98 removed statment concept 
#99 register C constant feature
#100 Improved virtual machine speed (Improved ~ x1.4) 

#101 Adapt inheritance feature developed on 1.1.3 version
#102 Bug: can use variable before define var itself
> #103 Adapt foreach to for(.. in .. )
#104 optimize embeded container ScriptVariable 
#105 Get rid AST Node limitation
#106 Study whether is posible parse + compile in single step 
> #107 Way to get the symbol_value at run time without ASTNode 
#108 Wayt to get filename + line without AST_NODE 
#109 Optimize parseExpression 
#110 Change concept structure by dictionary
#112 replace std::bind 
#116 CMakeLists: Make permament static link and add -DFCOMPILE

#114 Turn CZetScript class into helper functions inside zetscript namespace enhancement feature
#115 Rename "zetscript" namespace to "zs"
#117 Make MACROS register_C_XXXX all uppercase
 
#119 CEval as eval (all functions are C functions within zs member)
#118 split CZetScriptUtils file in io_utils, path_utils, logger as static function

#113 Replace try/catch by getError (canceled)
#120 Put all common function used by user in zs namespace and the rest in zs::core
#121 CEval,CScriptClassFactory and CZetScript as instanceable
#122 Restore CScriptClassFactory

> #125 Implement String class with string function utils and string methods (PART1)
#126 Save pure c function instead of std::function for speed improvement
#128 Implement register_c_function_as_member 
#129 Migrate new C++ coding style
#130 Feature add variables into instanced class (i.e this.a=0;)
#131 Adapt language to ECMA-6 
#133 Perform SUB instead of NEG+ADD
#134 Implement Math class with math function utils (PART1)
 
#135 eval negative identifier and constants tokens and perform LOAD with negative option or load negative constants instead of doing NEG.
#136 Clear unusued scopes
#137 Callback function support
> #139 Implement const operator 
#141 limit n params only for c functions 
#142 Try to optimize bind function member 
> #144 Implement IO helper utils PART1
#145 Implement eval Vector object
#146 Implement eval Dictionary object
#147 Implement bind class const static variable
#148 replace all writeError functions by throw and remove error param 
> #150 Improve print (does not crash put a integer, vector, etc.) also vector and dictionary does a pretty print.
#154 Fix continue, break keyword 
#153 fix DO-WHILE keyword
#152 fix WHILE keyword
#151 fix FOR keyword 
> #155 Check compile Visual Studio 2015, 2019
> #156 Fix SWITCH  
#157 Fix +=,-=,/= etc operator
> #159 Update manual ZetScript 2.0  
> #158 Update doc CodeProject ZetScript 2.0 
> #160 Update Invader ZetScript 2.0 
#161 Merge symbol+functions in one container !!!
#162 Implement eval Function object 
#164 implement length property built-in for get length of vector dictionary instead of call size() 
> #165 try eval expressions as constant 
#168 When semicolon on expression is missing it shows wrong filename 
> #169 Fix/Check metamethods 
#170 Fix class 
> #171 test returns stack var with 0 refs 
#172 get rid super scope
#173 Manage this context automatically on anonymouse function created on class 

Other: Lot of clean code up. 

//----------------------------------------------------------
Version: 1.3.0
Date: 30-03-2018


#48 Optimize compile process.
#47 Implement interactive console (zs).
#46 Fixed seg fault on destroy objects in struct.
#49 doing operations of returning values doesnt't work.
#39 Script function and script classes are not clean after call cleancompile
#53 Not do pop scope on returns inside body 
#56 Show only line if file == DEFAULT_FILENAME or not found
#57 it gives "Expected symbol after ','" message on void structs
#54 Memory leaks detection (only for new keywords that involve C class) 
#55 Implement add_attr/remove_attr functions for CStructVariable 
#58 Removed clear compile information on saveState. 
#59 Return undefined on NULL pointers after call C function with value. 
#60 seg fault on calling first a function call and then register a variable
#61 Clean whoke stack array on clean compile  
#62 VM speed improve ~ x2

Added fibonacci test (fib.zs)

//----------------------------------------------------------
Version: 1.2.0
Date: 13-02-2018

#30: ASTNode.h right push/pop pragma.
#31: Configure output library as shared. 
#28: Fixed ciclic dependency in class_C_baseof function on already registered classes.
#34: Added support for unsigned int and intptr_t types. 
#35: Fixed. Bug bad scope index on push/pop ast node 
#36: Fixed. It doesn't register a class if it tries to register some variable base of class that has not registered by base_of_class 
#37: Fixed. When symbols are not found during searching on its linking, it does a memory corruption 
#38: Fixed. Bug double free pointer on set/restore state
#39: Fixed. Script function and script classes are not clean after call cleancompile function.
#41: More detail information about error accessing function "XXXXX" when prints "Expected scriptvar".
#43: Improvement split eval process into parse, compile and execute functions.
#40: Support detection class base of param type in C function calls.
#41: Fixed/Implemented. Due virtual classes changes its memory map at run-time, function and variables cannot ensure the same pointer as base class so
     has been decided to disable heritate all functions/variables from parent classes (only C).
     Due 41, now we have to pass class type on both register_C_FunctionMember/register_C_VariableMember (+1 feature version)
#45: Fixed. Seg. fault on returning wrong C pointer derived class. A helper function has been implemented to return right pointer in function of type parameter.

-Due float it cannot be the same size as the any param of c functions, float type is disable since 1.2. Instead do float *. 
-Fixed. Seg.faults on returning strings * from C functions.
-Check if C function can be registered. C function should be registered at last elements. 
-VM: It prints more information when user wants to access to member function into primitive. Currently it gives the error 
-Support converting pointers C functions if can derive from base class.
-Fixed. Seg.faults on autodelete C pointers given by some C function.
-Fixed. Assignment of C variables of type int/number independent if source script variable is int or number.
-vscript2vector: support for converting elements to numbers (aka floats).

-Removed assign hereritance of runtime stack var on assigment op.
-Fixed. Seg. fault on restore/save states.
-Renamed zg_variable.x to zs_variable.



//----------------------------------------------------------
Version: 1.1.3
Date: 19-11-2017

Make compatible binding functions with MSVC compiler.

//----------------------------------------------------------
Version: 1.1.2
Date: 19-11-2017

Solved bug #25: Fixed error on keyword after case/default keyword

//----------------------------------------------------------
Version: 1.1.1
Date: 12-11-2017

Fixed bug #24
Fixed bug #23

#22: cast vector from/to stk implemented
#21: bind functions already implemented

//----------------------------------------------------------
Version: 1.1.0
Date: 11-11-2017

- Script function calls usign std::function.

//----------------------------------------------------------
Version: 1.0.2
Date: 05-11-2017

Solved some bugs
print comulative errors getErrorMsg()

//----------------------------------------------------------
Version: 1.0.1
Date: 04-11-2017

Solved some bugs

//----------------------------------------------------------
Version: 1.0.0
Date: 04-11-2017

Solved various bugs
ZetScript bugs various bug
Implement error feature feature
Support for if-else if-else feature
Memory leaks improvement
 